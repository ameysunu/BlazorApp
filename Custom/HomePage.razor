@page "/"
@using static BlazorApp.Custom.Register
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<h1>Welcome to Wellbeing!</h1>

@if (isCheckingAuth)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
} else 
{
    @if (isLogged)
    {
        <div class="row">
            <div class="col">
                <h4>Hi there @userInfo.Nickname </h4>
            </div>
            <div class="col text-end">
                <p> You are logged in as: @userInfo.Email</p>
            </div>
        </div>

        @if (!userInfo.EmailVerified)
        {
            <div class="alert alert-warning" role="alert">
                You're email is not verified.
                <button type="button" @onclick="() => ResendEmailVerification(userInfo.Subject)" class="btn btn-light" disabled ="@emailVerificationSent">Verify now</button>
            </div>
        }

        @if (!string.IsNullOrEmpty(evError))
        {
            <div class="alert alert-danger" role="alert">
                @evError
            </div>
        }

        @if (!string.IsNullOrEmpty(evSuccess))
        {
            <div class="alert alert-success" role="alert">
                @evSuccess
            </div>
        }
    }

    <p>Wellbeing is your health partner. You can track your moods, and improve your overall wellbeing. </p>
    <br />
    <h4>Features</h4>
    <ul>
        <li>Mood Tracking</li>
        <li>Personalized Insights</li>
        <li>Relaxation Techniques</li>
        <li>Guided Meditation</li>
        <li>Mental Health Resources</li>
    </ul>
    <br />

    @if (isLogged)
    {
        <button type="button" class="btn btn-primary" onclick="window.location.href='/dashboard'">Go to Dashboard</button>
    }

    @if (!isLogged)
    {
        <h5>Login or Register to get started!</h5>
    }
}


@code {
    bool isLogged;
    UserInfo userInfo;
    bool isCheckingAuth = true;
    public static bool emailVerificationSent = false;
    public static string evSuccess;
    public static string evError;
    [Inject]
    NavigationManager NavigationManager { get; set; }

    public class UserInfo
    {
        [JsonProperty("sub")]
        public string Subject { get; set; }

        [JsonProperty("nickname")]
        public string Nickname { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("picture")]
        public string Picture { get; set; }

        [JsonProperty("updated_at")]
        public DateTime UpdatedAt { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("email_verified")]
        public bool EmailVerified { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            emailVerificationSent = false;
            evSuccess = "";
            evError = "";

            var authToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(authToken))
            {
                if (authToken.Contains("ey"))
                {
                    Console.WriteLine("AuthToken retrieved from localStorage: " + authToken);

                    var tokenTTL = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "tokenTTL");
                    var timeDifference = DateTime.Now - DateTime.Parse(tokenTTL);

                    bool ttlExpired = Math.Abs(timeDifference.TotalMinutes) > 30;

                    if (!ttlExpired)
                    {
                        isLogged = true;
                        userInfo = await GetUserInfo(authToken);
                        StateHasChanged();
                    } else
                    {
                        NavigationManager.NavigateTo("/logout");
                    }
                }
                else
                {
                    isLogged = false;
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine("AuthToken not found in localStorage.");
                isLogged = false;
            }
            isCheckingAuth = false;
            StateHasChanged();
        }
    }

    public static async Task<UserInfo> GetUserInfo(string accessToken)
    {
        var userinfoEndpoint = "https://dev-pa3bipmqjbfbdc4d.us.auth0.com/userinfo";

        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var response = await httpClient.GetAsync(userinfoEndpoint);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                dynamic userJson = JsonConvert.DeserializeObject(responseContent);

                Console.WriteLine($"User retrieved as: {userJson}");

                UserInfo userInfo = userJson.ToObject<UserInfo>();
                return userInfo;
            }
            else
            {
                Console.WriteLine($"Error getting userinfo: {response.StatusCode}");
                return null;
            }
        }
    }

    public static async Task<bool> ResendEmailVerification(string userId)
    {
        emailVerificationSent = true;

        try
        {
            var authToken = await GetTokenFromAuth();

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken.access_token);

                var content = new StringContent($"{{\"user_id\":\"{userId}\",\"client_id\":\"bUPQBV3ZgatRowJgPIfpKQhnddlrjO8B\"}}", Encoding.UTF8, "application/json");

                using (var response = await client.PostAsync("https://dev-pa3bipmqjbfbdc4d.us.auth0.com/api/v2/jobs/verification-email", content))
                {
                    response.EnsureSuccessStatusCode();

                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseContent);
                    evSuccess = "Verification email has been successfully sent.";


                    return true;
                }
            }
        }
        catch (Exception ex)
        {
            emailVerificationSent = false;
            Console.WriteLine($"Error: {ex.Message}");
            evError = $"Error: {ex.Message}";
            return false;
        }
    }

}
