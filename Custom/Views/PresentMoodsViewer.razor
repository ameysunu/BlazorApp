<br />
<br />

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var mood in moods.Select((value, index) => new {value, index}))
        {
            <div class="col-md-3">
                <div class="card">
                    <img src="@imageUrls[mood.index]" class="card-img-top" alt="@mood.value.mood">
                    <div class="card-body">
                        <h5 class="card-title">@mood.value.mood</h5>
                        <p class="card-text">@mood.value.mood_reason</p>
                        <button type="button" @onclick="() => DeleteTriggered(mood.value.id)" class="btn btn-danger">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if(moods.Count == 0)
    {
        <div class="alert alert-primary" role="alert">
           You have not logged any moods yet.
        </div>
    }

    @if(isDeleteTriggered){

    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Delete</h1>
                </div>
                <div class="modal-body">
                        
                        @if (!string.IsNullOrEmpty(deletionMessage))
                        {
                            @deletionMessage
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="window.location.href='/mood-tracking'">Close</button>
                            </div>
                            
                        } else
                        {
                           <p> Do you want to delete the selected mood? This action is irreversible. </p>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="window.location.href='/mood-tracking'">Close</button>
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteConfirmed()" disabled="@confirmDelete">Delete</button>
                            </div>
                        }
                    </div>

            </div>
        </div>
    </div>
    }

}


@code {
    @inject IJSRuntime JS
    public bool isLoading = true;
    public List<Mood> moods;
    public List<String> imageUrls = [];
    public bool isDeleteTriggered = false;
    public Guid moodId;
    public string deletionMessage;
    public bool confirmDelete = false;


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
           var userId = await JS.InvokeAsync<String>("localStorage.getItem", "userId");
           moods = await CosmosOperations.GetPresentMoods(userId);

            foreach(var mood in moods)
            {
              var imageUrl =  await CosmosOperations.GetImagesFromMoodCosmos(Double.Parse(mood.mood));
              imageUrls.Add(imageUrl);
            }

           isLoading = false;
           StateHasChanged();
        }
    }

    private bool DeleteTriggered(Guid moodID)
    {
        isDeleteTriggered = true;
        moodId = moodID;
        return isDeleteTriggered;
    }

    public async Task DeleteConfirmed()
    {
        confirmDelete = true;
        deletionMessage = await CosmosOperations.DeleteMoodFromCosmos(moodId);
    }

}
