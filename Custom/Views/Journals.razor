@page "/journals"
@inject IJSRuntime JSRuntime

<PageTitle>Journals</PageTitle>
<div class="d-flex justify-content-between align-items-center">
    <h3>Journals</h3>
    <div class="ml-auto">
        <div class="mr-3"></div>
        <button class="btn btn-primary" onclick="window.location.href='/journal-entry'">Create an entry</button>
    </div>
</div>

<br />
<br />

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
}


@if(journalList.Count > 0)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var journal in journalList.Select((value, index) => new { value, index }))
        {
            <div class="col-md-3">
                <div class="card">
                    <div class="card-header">
                        @journal.value.title
                    </div>
                    <div class="card-body">
                        <blockquote class="blockquote mb-0">
                            <p>@journal.value.journalData</p>
                            <footer class="blockquote-footer">@FormatDateTime(journal.value.created_at)</footer>
                        </blockquote>
                    </div>
                </div>
            </div>
        }
    </div>
} else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        You have no journals. Create one to get started.
    </div>
} 

@code {
    public bool isLoading = true;
    public List<Journal> journalList = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            var allJournals = await CosmosOperations.GetJournals(userId);

            foreach(var journals in allJournals)
            {
                journalList.Add(journals);
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    public String FormatDateTime(String createdAt)
    {
        DateTime createdAtDateTime = DateTime.Parse(createdAt);
        return createdAtDateTime.ToString("dddd, dd MMMM yyyy");
    }

}
