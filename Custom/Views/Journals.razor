@page "/journals"
@inject IJSRuntime JSRuntime

<PageTitle>Journals</PageTitle>
<div class="d-flex justify-content-between align-items-center">
    <h3>Journals</h3>
    <div class="ml-auto">
        <div class="mr-3"></div>
        <button class="btn btn-primary" onclick="window.location.href='/journal-entry'">Create an entry</button>
    </div>
</div>

<br />
<br />

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
}

@if (!string.IsNullOrEmpty(journalId) && journalData != null)
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <h4>@journalData.title</h4>
    <p style="color:gray">@FormatDateTime(journalData.created_at)</p>
    <p>@journalData.summary</p>
    <br />
    <p>@journalData.journalData</p>
    <br />
    <br />
    <br />
    <button class="btn btn-danger" disabled="@isDelete" @onclick="() => DeleteJournal(journalId)">Delete journal</button>
} 
else if(journalList.Count > 0)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var journal in journalList.Select((value, index) => new { value, index }))
        {
            <div class="col-md-3">
                <div class="card">
                    <div class="card-header">
                        @journal.value.title
                    </div>
                    <div class="card-body">
                        <blockquote class="blockquote mb-0">
                            <p>@journal.value.summary</p>
                            <footer class="blockquote-footer">@FormatDateTime(journal.value.created_at)</footer>
                        </blockquote>
                        <br />
                        <button type="button" onclick="window.location.href = '/journals?id=@journal.value.id'" class="btn btn-primary">View</button>
                    </div>
                </div>
            </div>
        }
    </div>
} else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        You have no journals. Create one to get started.
    </div>
}

@code {
    public bool isLoading = true;
    public List<Journal> journalList = [];
    [Inject]
    NavigationManager NavigationManager { get; set; }
    public string journalId;
    public Journal journalData;
    public string errorMessage;
    public bool isDelete = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
            journalId = queryParams["id"];
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            if (firstRender && !string.IsNullOrEmpty(journalId))
            {
                journalData = await CosmosOperations.GetJournalById(userId, journalId);
                isLoading = false;
            }
            else
            {

                var allJournals = await CosmosOperations.GetJournals(userId);

                foreach (var journals in allJournals)
                {
                    journalList.Add(journals);
                }
                isLoading = false;
                StateHasChanged();
            }
            StateHasChanged();
        }
    }

    public String FormatDateTime(String createdAt)
    {
        DateTime createdAtDateTime = DateTime.Parse(createdAt);
        return createdAtDateTime.ToString("dddd, dd MMMM yyyy");
    }

    public async void DeleteJournal(String journalId)
    {
        isDelete = true;
        var journalIdGuid = Guid.Parse(journalId);
        var deleteJournal = await CosmosOperations.DeleteJournalById(journalIdGuid);
        if (deleteJournal.Contains("Success"))
        {
            NavigationManager.NavigateTo("/journals", forceLoad: true);
        } else
        {
            errorMessage = deleteJournal;
        }
        StateHasChanged();
    }

}
