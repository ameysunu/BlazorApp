@page "/myspace/recommendation"
@inject IJSRuntime JSRuntime

<h3>Recommendation</h3>

<br />

<div class="d-flex justify-content-between align-items-center">
    <p style="color: gray"> Last Refreshed: @dateTimeRefresh</p>
    <div class="ml-auto">
        <div class="mr-3"></div>
        @if (!refreshRequested)
        {
            <button class="btn btn-primary" @onclick="() => RefreshRecommendations()">Refresh Data</button>
        } else
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Refreshing</span>
            </div>
        }
    </div>
</div>

<br />

@if(isLoading)
{

    <div class="d-flex justify-content-center align-items-center">
        <Spinner Color="SpinnerColor.Primary" />
    </div>
} else {

@if(recommendation != null)
{
    <h6>These recommendations are personalized just for you. Once, you submit any more of your mood entry or journal you can keep refreshing the data, and we will personalize as you go.</h6>
    <br />

    <h3>Journal Recommendation</h3>
    <p>Based on your journal data, this is what we recommend to you:</p>
    <p>@recommendation.journal_recommendation</p>

    <br/>
    <br/>
    <br />
    <h3>Mood Recommendation</h3>
    <p>@recommendation.mood_recommendation</p>

} else
{
    <p> You have no recommendations. You can request for a new one once you've put in your mood data or your journals</p>
}
}

<br />
<br />
@if (refreshSent)
{

    <div class="alert alert-success" role="alert">
        Your refreshed data has been requested. It will be available to you on your dashboard once we have it generated.
    </div>
}

@code {
    bool refreshRequested = false;
    string dateTimeRefresh = "";
    bool refreshSent = false;
    BlazorApp.Custom.Controllers.Recommendation recommendation = new BlazorApp.Custom.Controllers.Recommendation();
    bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            recommendation = await CosmosOperations.GetRecommendationByUserId(userId);
            if (recommendation != null)
            {
                dateTimeRefresh = FormatDateTime(recommendation.created_at);
            } else
            {
                dateTimeRefresh = "Never refreshed";
            }
            isLoading = false;
        }

        StateHasChanged();
    }

    public async Task<String> RefreshRecommendations()
    {
        refreshRequested = true;
        StateHasChanged();

        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        
        var allMoods = await CosmosOperations.GetAllMoodsForRecommendation(userId);
        var allJournals = await CosmosOperations.GetAllJournalDataForRecommendation(userId);

        var allMoodsString = ConvertAllMoodsToString(allMoods);
        var allJournalsString = ConvertAllJournalsToString(allJournals);

        var configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: false, reloadOnChange: true).Build();
        using (HttpClient client = new HttpClient())
        {
            string url = configuration["RecommendationEngineUrl"];
            string payload = $@"
        {{
           ""moodData"": ""{allMoodsString}"",
           ""journalData"": ""{allJournalsString}"",
           ""userId"": ""{userId}""
        }}";

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
            request.Content = new StringContent(payload, Encoding.UTF8, "application/json");

            refreshSent = true;
            refreshRequested = false;

            HttpResponseMessage response = await client.SendAsync(request);
            StateHasChanged();
        }

        return "";
    }

    public string FormatDateTime(string createdAt)
    {
        string format = "M/d/yyyy h:mm:ss tt";

        if (DateTime.TryParseExact(createdAt, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime createdAtDateTime))
        {
            return createdAtDateTime.ToString("dddd, dd MMMM yyyy, hh:mm tt");
        }
        else
        {
            return "Invalid date and time format";
        }
    }


    public static string ConvertAllMoodsToString(List<(string, string)> allMoods)
    {
        StringBuilder sb = new StringBuilder();
        foreach (var mood in allMoods)
        {
            sb.Append($"({mood.Item1}, {mood.Item2})");
        }
        return sb.ToString();
    }

    public static string ConvertAllJournalsToString(List<string> allJournals)
    {
        StringBuilder sb = new StringBuilder();
        foreach(var journal in allJournals)
        {
            sb.Append($"{journal}, ");
        }
        return sb.ToString();
    }

}
