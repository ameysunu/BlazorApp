@page "/myspace/recommendation"
@inject IJSRuntime JSRuntime

<h3>Recommendation</h3>

<br />

<div class="d-flex justify-content-between align-items-center">
    <p style="color: gray"> Last Refreshed: @dateTimeRefresh</p>
    <div class="ml-auto">
        <div class="mr-3"></div>
        @if (!refreshRequested)
        {
            <button class="btn btn-primary" @onclick="() => RefreshRecommendations()">Refresh Data</button>
        } else
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Refreshing</span>
            </div>
        }
    </div>
</div>

@if (!string.IsNullOrEmpty(recommendation))
{
    <p>@recommendation</p>
}

<br />
<br />
@if (refreshSent)
{

    <div class="alert alert-success" role="alert">
        Your refreshed data has been requested. It will be available to you on your dashboard once we have it generated.
    </div>
}

@code {
    string recommendation = "";
    bool refreshRequested = false;
    string dateTimeRefresh = "";
    bool refreshSent = false;

    public async Task<String> RefreshRecommendations()
    {
        refreshRequested = true;
        StateHasChanged();

        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

        var allMoods = await CosmosOperations.GetAllMoodsForRecommendation(userId);
        var allJournals = await CosmosOperations.GetAllJournalDataForRecommendation(userId);

        var allMoodsString = ConvertAllMoodsToString(allMoods);

        var configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: false, reloadOnChange: true).Build();
        using (HttpClient client = new HttpClient())
        {
            string url = configuration["RecommendationEngineUrl"];
            string payload = $@"
        {{
           ""moodData"": ""{allMoodsString}"",
           ""journalData"": ""{allJournals}"",
           ""userId"": ""{userId}""
        }}";

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
            request.Content = new StringContent(payload, Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.SendAsync(request);
            refreshSent = true;
            refreshRequested = false;
            StateHasChanged();
        }

        return "";
    }

    public String FormatDateTime(String createdAt)
    {
        DateTime createdAtDateTime = DateTime.Parse(createdAt);
        return createdAtDateTime.ToString("dddd, dd MMMM yyyy, hh:mm");
    }

    public static string ConvertAllMoodsToString(List<(string, string)> allMoods)
    {
        StringBuilder sb = new StringBuilder();
        foreach (var mood in allMoods)
        {
            sb.Append($"({mood.Item1}, {mood.Item2})");
        }
        return sb.ToString();
    }

}
