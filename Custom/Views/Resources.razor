@page "/resources"

<PageTitle>Resources</PageTitle>

<h1>Resources</h1>

@if (string.IsNullOrEmpty(blogId))
{
    
@if (isLoading)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @for (int i=0; i<5; i++ )
        {
            <div class="col-md-3">
                <div class="card" aria-hidden="true">
                    <div class="card-body">
                        <h5 class="card-title placeholder-glow">
                            <span class="placeholder col-6"></span>
                        </h5>
                        <p class="card-text placeholder-glow">
                            <span class="placeholder col-7"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-6"></span>
                            <span class="placeholder col-8"></span>
                        </p>
                        <a class="btn btn-primary disabled placeholder col-6" aria-disabled="true"></a>
                    </div>
                </div>
            </div>
        }
    </div>
} else
{
    <br />
    <br />

    @if(allArticles.Count > 0)
    {
    <h4>Articles</h4>
     <br />
     <ul class="list-group list-group-flush">
        @foreach (var article in allArticles.Select((value, index) => new { value, index }))
        {

            <li class="list-group-item">
                <div class="row">
                    <div class="col">
                        <h5>@article.value.title</h5>
                        <br />
                        <p style="font-size: 12px;" class="blockquote-footer">@FormatDateTime(article.value.created_on)</p>
                    </div>
                    <div class="col">
                        <button type="button" onclick="window.location.href = 'https://@article.value.url'" class="btn btn-primary">View</button>
                    </div>
                </div>
            </li>
        }

     </ul>
    }

    <br />
    <br />
    <h4>Blogs</h4>
    <br />

    @if (allBlogs.Count > 0)
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var blog in allBlogs.Select((value, index) => new { value, index }))
            {
                    <div class="box">
                        <div class="bar">
                            <span class="dot"></span>
                            <span class="dot"></span>
                            <span class="dot"></span>
                        </div>
                        <div class="box-content">
                            <h5>@blog.value.title</h5>
                            <button type="button" onclick="window.location.href = '/resources?blogId=@blog.value.id'" class="btn btn-primary">View</button>
                        </div>
                       </div>
            }
            <br />
        </div>
    }
    }
} else
{
    <br />
    <br />
    <h5>@currentBlog.title</h5>
    <br />
    <p>@currentBlog.content</p>
    <br />
    <p style="color: gray">Author: Google Gemini, Last Modified on: @FormatDateTime(currentBlog.created_at)</p>
}

<style>
.roboto-slab {
  font-family: "Roboto Slab", serif;
  font-optical-sizing: auto;
  font-weight: 120;
  font-style: normal;
}

    .dot {
        border: 3px solid #000;
        border-radius: 50%;
        height: 15px;
        width: 15px;
    }

    .bar {
        align-items: center;
        background-color: #845EC2;
        border-left: 3px solid #000;
        border-right: 3px solid #000;
        border-top: 3px solid #000;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        display: flex;
        height: 50px;
        padding-left: 16px;
        padding-right: 16px;
    }


    .box-content {
        background-color: #fff;
        border: 3px solid #000;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        padding: 32px;
    }

</style>


@code {
    List<Articles> allArticles = [];
    List<BlogPosts> allBlogs = [];
    bool isLoading = true;
    [Inject]
    NavigationManager NavigationManager { get; set; }
    String blogId = "";
    BlogPosts currentBlog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
            blogId = queryParams["blogId"];

            if (string.IsNullOrEmpty(blogId))
            {

                allArticles = await CosmosOperations.GetAllArticles();
                allBlogs = await CosmosOperations.GetAllBlogs();
                isLoading = false;
                StateHasChanged();
            } else
            {
                currentBlog = await CosmosOperations.GetBlogById(blogId);
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    public string FormatDateTime(string createdAt)
    {
        string format = "M/d/yyyy h:mm:ss tt";

        if (DateTime.TryParseExact(createdAt, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime createdAtDateTime))
        {
            return createdAtDateTime.ToString("dddd, dd MMMM yyyy, hh:mm tt");
        }
        else
        {
            return "Invalid date and time format";
        }
    }
}
