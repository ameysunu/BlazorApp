@page "/resources"

<PageTitle>Resources</PageTitle>

<h1>Resources</h1>

@if (isLoading)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @for (int i=0; i<15; i++ )
        {
            <div class="col-md-3">
                <div class="card" aria-hidden="true">
                    <div class="card-body">
                        <h5 class="card-title placeholder-glow">
                            <span class="placeholder col-6"></span>
                        </h5>
                        <p class="card-text placeholder-glow">
                            <span class="placeholder col-7"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-6"></span>
                            <span class="placeholder col-8"></span>
                        </p>
                        <a class="btn btn-primary disabled placeholder col-6" aria-disabled="true"></a>
                    </div>
                </div>
            </div>
        }
    </div>
} else
{
    <br />
    <br />
    <h4>Articles</h4>
    <br />

    @if(allArticles.Count > 0)
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var article in allArticles.Select((value, index) => new { value, index }))
            {
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-header">
                            @article.value.title
                        </div>
                        <div class="card-body">
                            <blockquote class="blockquote mb-0">
                                <p style="font-size: 12px;">@article.value.url</p>
                                <footer class="blockquote-footer">@FormatDateTime(article.value.created_on)</footer>
                            </blockquote>
                            <br />
                            <button type="button" onclick="window.location.href = '/resources/articles?id=@article.value.id'" class="btn btn-primary">View</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}


@code {
    List<Articles> allArticles = [];
    bool isLoading = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allArticles = await CosmosOperations.GetAllArticles();
            isLoading = false;
            StateHasChanged();
        }
    }

    public string FormatDateTime(string createdAt)
    {
        string format = "M/d/yyyy h:mm:ss tt";

        if (DateTime.TryParseExact(createdAt, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime createdAtDateTime))
        {
            return createdAtDateTime.ToString("dddd, dd MMMM yyyy, hh:mm tt");
        }
        else
        {
            return "Invalid date and time format";
        }
    }
}
