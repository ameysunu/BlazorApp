@page "/login"
@inject IJSRuntime JS
<PageTitle>Login</PageTitle>

<div class="container">
    <br />
    
    <style>
                .dot {
                    border: 3px solid #000;
                    border-radius: 50%;
                    height: 15px;
                    width: 15px;
                }

                .bar {
                    align-items: center;
                    background-color: #ff8473;
                    border-left: 3px solid #000;
                    border-right: 3px solid #000;
                    border-top: 3px solid #000;
                    border-top-left-radius: 10px;
                    border-top-right-radius: 10px;
                    display: flex;
                    height: 50px;
                    padding-left: 16px;
                    padding-right: 16px;
                }


                .box-content {
                    background-color: #fff;
                    border: 3px solid #000;
                    border-bottom-left-radius: 10px;
                    border-bottom-right-radius: 10px;
                    padding: 32px;
                }

                .box {
                    border-radius: 10px
                }

    </style>

            <div class="box">
                <div class="bar">

                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>

                </div>
                <div class="box-content">

                    <h1>Welcome Back!</h1>
                    <p>Hey there, let's get you back logged in so you can get started.</p>
                    <br />
                    <p style="font-size: 20px">Authentication powered by Okta Auth0</p>

                    <button class="btn btn-primary" @onclick="_Login" disabled="@processRegistration">Secure Login with Auth0</button>
                    <br/>
                    <br />
                    <p style="font-size: 18px; color: dimgray">Don't have an account? Register here <a href="/register">now</a>, or you can login above to directly create an account with Auth0.</p>
                </div>
            </div>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            Login successful. Redirecting you to dashboard in @timeLeft, if you're not automatically redirected
            <a href="/dashboard?refresh=@DateTime.Now.Ticks">click here.</a>
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(authMessage))
    {
        <div class="alert alert-info mt-3" role="alert">
            Please wait, authenticating from Auth0. Do not click refresh or go back.
        </div>
    }
    </div>



@code {
    private bool processRegistration = false;
    private bool codeExists = false;
    string CodeParameter;
    string errorMessage;
    string successMessage;
    bool userAuthTokenInvoked;
    string userAuthToken;
    private System.Timers.Timer timer;
    private int timeLeft = 3;
    HomePage.UserInfo userInfo;
    string authMessage;

    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    private IConfiguration Configuration { get; set; }

    private async void _Login()
    {
        processRegistration = true;


        if (Configuration["isSandbox"] != "true")
        {
            if (Configuration["isUSAppService"] != "true")
            {
                var authorizeUrl = $"https://dev-pa3bipmqjbfbdc4d.us.auth0.com/authorize" +
            $"?response_type=code" +
            $"&client_id=bUPQBV3ZgatRowJgPIfpKQhnddlrjO8B" +
            $"&redirect_uri=https://ameyplayground.azurewebsites.net/login" +
                $"&scope=openid profile email";
                NavigationManager.NavigateTo(authorizeUrl);
            } else 
            {
                var authorizeUrl = $"https://dev-pa3bipmqjbfbdc4d.us.auth0.com/authorize" +
$"?response_type=code" +
$"&client_id=bUPQBV3ZgatRowJgPIfpKQhnddlrjO8B" +
$"&redirect_uri=https://ameyplaygroundus.azurewebsites.net/login" +
    $"&scope=openid profile email";
                NavigationManager.NavigateTo(authorizeUrl);
            }
        } else
        {
            var authorizeUrl = $"https://dev-pa3bipmqjbfbdc4d.us.auth0.com/authorize" +
        $"?response_type=code" +
$"&client_id=bUPQBV3ZgatRowJgPIfpKQhnddlrjO8B" +
    $"&redirect_uri=https://localhost:7134/login" +
    $"&scope=openid profile email";
            NavigationManager.NavigateTo(authorizeUrl);
        }
    } 

    protected override async void OnAfterRender(bool firstRender)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        CodeParameter = queryParams["code"];

        if (firstRender && !string.IsNullOrEmpty(CodeParameter))
        {
            processRegistration = true;
            userAuthToken = await GetAuthToken(CodeParameter);
            if (userAuthToken != null)
            {
                JS.InvokeVoidAsync("localStorage.setItem", "authToken", $"{userAuthToken}");

                if (userAuthToken.Contains("ey"))
                {
                    authMessage = "true";
                    StateHasChanged();

                    userInfo = await HomePage.GetUserInfo(userAuthToken);
                    JS.InvokeVoidAsync("localStorage.setItem", "userId", $"{userInfo.Subject}");
                    JS.InvokeAsync<string>("localStorage.setItem", "tokenTTL", DateTime.Now);


                    Container userContainer = await CosmosOperations.ConnectToCosmosUserDB();
                    var userExistsInCosmos = await CosmosOperations.CheckIfUserExists(userContainer, userInfo.Subject);

                    if (!userExistsInCosmos)
                    {
                        await CosmosOperations.CreateUser(userContainer, userInfo.Email, userInfo.Nickname, userInfo.Picture, userInfo.Subject);
                    }

                    authMessage = "";
                    successMessage = "true";
                    StateHasChanged();
                    timer = new System.Timers.Timer();
                    timer.Interval = 1000;
                    timer.AutoReset = true;
                    timer.Elapsed += TimerElapsed;
                    timer.Start();
                } else
                {
                    errorMessage = $"Login failed. {userAuthToken}";
                }
            } else
            {
                errorMessage = $"Login failed. The auth token retrieved was null";
            }
            StateHasChanged();
        }
        else if (!string.IsNullOrEmpty(userAuthToken) && !string.IsNullOrEmpty(CodeParameter))
        {
            JS.InvokeVoidAsync("localStorage.setItem", "authToken", $"{userAuthToken}");
        }
    }

    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeLeft > 0)
        {
            timeLeft--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            timer.Stop();
            NavigationManager.NavigateTo("/dashboard", forceLoad: true);
        }
    }
    public void Dispose()
    {
        timer.Dispose();
    }

    protected override async void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        CodeParameter = queryParams["code"];
        if (!string.IsNullOrEmpty(CodeParameter))
        {
            processRegistration = true;
        }
    }

    private async Task<String> GetAuthToken(string code)
    {
        string redirectUri;
        var tokenEndpoint = $"https://dev-pa3bipmqjbfbdc4d.us.auth0.com/oauth/token";
        if (Configuration["isSandbox"] != "true")
        {
            if (Configuration["isUSAppService"] != "true")
            {
                redirectUri = "https://ameyplayground.azurewebsites.net/login";
            } else {
                redirectUri = "https://ameyplaygroundus.azurewebsites.net/login";
            }
        } else
        {
            redirectUri = "https://localhost:7134/login";
        }

        var requestContent = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("grant_type", "authorization_code"),
            new KeyValuePair<string, string>("client_id", "bUPQBV3ZgatRowJgPIfpKQhnddlrjO8B"),
            new KeyValuePair<string, string>("client_secret", "3O4ilQ71uKmdXM1g4H2-hWKbcuxD1NuiLNntx_oMtgoqTDeQi1P8BRtQ7c7b29y7"),
            new KeyValuePair<string, string>("code", code),
            new KeyValuePair<string, string>("redirect_uri", $"{redirectUri}")
        });

        using (HttpClient httpClient = new HttpClient())
        {

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                dynamic json = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);
                //JS.InvokeVoidAsync("localStorage.setItem", "authToken", json.access_token);
                return json.access_token;
            }
            else
            {
                // Handle error
                Console.WriteLine($"Error authenticating: {response.StatusCode}");
                return null;
            }
        }
    }
}
